{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The very beginning What is mc.py? mc.py is a tiny and trivial Python module which provides you a simple way to generate phrases using Markov chains. Scope of application I think it is mostly just for fun. I know that some devs use this or similar modules for chat-bots to generate funny messages (e.g. VK bot Witless or VK bot Sglypa ). I used it to generate funny cringy gopnik-like quotes. Worth reading before start (It is complicated and absolutely optional, but quite interesting). Markov chain (Wikipedia) Markov model (Wikipedia) Variable order Markov model (Wikipedia) \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0446\u0435\u043f\u0435\u0439 \u041c\u0430\u0440\u043a\u043e\u0432\u0430: \u0442\u0435\u043e\u0440\u0438\u044f \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 (tproger.ru) Simple usage example More examples can be found here . import mc from mc.builtin import validators generator = mc . PhraseGenerator ( samples = [ \"hello world\" , \"world of cuties\" , \"bruh\" ] ) phrase = generator . generate_phrase ( validators = [ validators . words_count ( minimal = 4 )] ) print ( phrase ) # >>> \"hello world of cuties\"","title":"The very beginning"},{"location":"#the-very-beginning","text":"","title":"The very beginning"},{"location":"#what-is-mcpy","text":"mc.py is a tiny and trivial Python module which provides you a simple way to generate phrases using Markov chains.","title":"What is mc.py?"},{"location":"#scope-of-application","text":"I think it is mostly just for fun. I know that some devs use this or similar modules for chat-bots to generate funny messages (e.g. VK bot Witless or VK bot Sglypa ). I used it to generate funny cringy gopnik-like quotes.","title":"Scope of application"},{"location":"#worth-reading-before-start","text":"(It is complicated and absolutely optional, but quite interesting). Markov chain (Wikipedia) Markov model (Wikipedia) Variable order Markov model (Wikipedia) \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0442\u0435\u043a\u0441\u0442\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0446\u0435\u043f\u0435\u0439 \u041c\u0430\u0440\u043a\u043e\u0432\u0430: \u0442\u0435\u043e\u0440\u0438\u044f \u0438 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 (tproger.ru)","title":"Worth reading before start"},{"location":"#simple-usage-example","text":"More examples can be found here . import mc from mc.builtin import validators generator = mc . PhraseGenerator ( samples = [ \"hello world\" , \"world of cuties\" , \"bruh\" ] ) phrase = generator . generate_phrase ( validators = [ validators . words_count ( minimal = 4 )] ) print ( phrase ) # >>> \"hello world of cuties\"","title":"Simple usage example"},{"location":"PhraseGenerator/","text":"PhraseGenerator High-level interface to generate phrases. PhraseGenerator is in fact the only thing you need to learn to use mc.py . Creation PhraseGenerator instance is created same way as any class instance. It's constructor method accepts the following arguments: samples ( List[str] ) - list of sample phrases to be used to generate new ones. order ( int , is 1 as default, should be >= 1) - order of Markov model which will be used to generate phrases. Example: from mc import PhraseGenerator generator = PhraseGenerator ( samples = [ \"I hate cottage cheese\" , \"cottage cheese is awful\" ], order = 1 , ) Methods generate_phrase Generates random phrase which was validated by provided validators , formatted using formatters in provided number of attempts. Arguments attempts ( int , >= 1, is 1 by default) - amount of attempts before giving up generating phrase. validators ( list of Callable ) - list of functions that validate result phrase . formatters ( list of Callable ) - list of functions that format result phrase . Raises PhraseGeneratorError if generator was not able to generate phrase in given amount of tries.","title":"PhraseGenerator"},{"location":"PhraseGenerator/#phrasegenerator","text":"High-level interface to generate phrases. PhraseGenerator is in fact the only thing you need to learn to use mc.py .","title":"PhraseGenerator"},{"location":"PhraseGenerator/#creation","text":"PhraseGenerator instance is created same way as any class instance. It's constructor method accepts the following arguments: samples ( List[str] ) - list of sample phrases to be used to generate new ones. order ( int , is 1 as default, should be >= 1) - order of Markov model which will be used to generate phrases. Example: from mc import PhraseGenerator generator = PhraseGenerator ( samples = [ \"I hate cottage cheese\" , \"cottage cheese is awful\" ], order = 1 , )","title":"Creation"},{"location":"PhraseGenerator/#methods","text":"","title":"Methods"},{"location":"PhraseGenerator/#generate_phrase","text":"Generates random phrase which was validated by provided validators , formatted using formatters in provided number of attempts.","title":"generate_phrase"},{"location":"PhraseGenerator/#arguments","text":"attempts ( int , >= 1, is 1 by default) - amount of attempts before giving up generating phrase. validators ( list of Callable ) - list of functions that validate result phrase . formatters ( list of Callable ) - list of functions that format result phrase .","title":"Arguments"},{"location":"PhraseGenerator/#raises","text":"PhraseGeneratorError if generator was not able to generate phrase in given amount of tries.","title":"Raises"},{"location":"PhraseGenerator/formatters/","text":"Formatters Formatters in mc.py are functions that format result phrase. They accept str and return str . mc.py currently have only one built-in formatter. It is located at mc.builtin.formatters . Builtin formatters usual_syntax - formats phrase as usual sentences: Uppercase first letter, etc. Example: from mc.builtin.formatters import usual_syntax text = \"hello, world! well\" formatted_text = usual_syntax ( text ) print ( formatted_text ) # >>> \"Hello, world! Well.\" Writing my own formatter It's easy! Just keep in mind that formatter should accept str , do something with it and return formatted str . Example: from mc import PhraseGenerator def my_formatter ( phrase : str ) -> str : return \"The computer says: \" + phrase generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( formatters = [ my_formatter ])","title":"Formatters"},{"location":"PhraseGenerator/formatters/#formatters","text":"Formatters in mc.py are functions that format result phrase. They accept str and return str . mc.py currently have only one built-in formatter. It is located at mc.builtin.formatters .","title":"Formatters"},{"location":"PhraseGenerator/formatters/#builtin-formatters","text":"usual_syntax - formats phrase as usual sentences: Uppercase first letter, etc. Example: from mc.builtin.formatters import usual_syntax text = \"hello, world! well\" formatted_text = usual_syntax ( text ) print ( formatted_text ) # >>> \"Hello, world! Well.\"","title":"Builtin formatters"},{"location":"PhraseGenerator/formatters/#writing-my-own-formatter","text":"It's easy! Just keep in mind that formatter should accept str , do something with it and return formatted str . Example: from mc import PhraseGenerator def my_formatter ( phrase : str ) -> str : return \"The computer says: \" + phrase generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( formatters = [ my_formatter ])","title":"Writing my own formatter"},{"location":"PhraseGenerator/validators/","text":"Validators Validators in mc.py are functions that validate result phrase. They accept str and return bool ( True or False ) according to whether they \"liked\" the phrase. mc.py currently have two built-in validators. They are located at mc.builtin.validators . Builtin validators words_count - validates phrase by words count. chars_count - validates phrase by symbols count. Example: from mc import PhraseGenerator from mc.builtin import validators generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( validators = [ validators . words_count ( minimal = 2 , maximal = 5 ), validators . chars_count ( minimal = 6 , maximal = 99 ) ] ) Writing my own validator It's simple! Just keep in mind that validator should accept str , do some checks and return True or False . Example: from mc import PhraseGenerator def my_validator ( phrase : str ) -> bool : if phrase . startswith ( \"jija\" ): return True else : return False generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( validators = [ my_validator ])","title":"Validators"},{"location":"PhraseGenerator/validators/#validators","text":"Validators in mc.py are functions that validate result phrase. They accept str and return bool ( True or False ) according to whether they \"liked\" the phrase. mc.py currently have two built-in validators. They are located at mc.builtin.validators .","title":"Validators"},{"location":"PhraseGenerator/validators/#builtin-validators","text":"words_count - validates phrase by words count. chars_count - validates phrase by symbols count. Example: from mc import PhraseGenerator from mc.builtin import validators generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( validators = [ validators . words_count ( minimal = 2 , maximal = 5 ), validators . chars_count ( minimal = 6 , maximal = 99 ) ] )","title":"Builtin validators"},{"location":"PhraseGenerator/validators/#writing-my-own-validator","text":"It's simple! Just keep in mind that validator should accept str , do some checks and return True or False . Example: from mc import PhraseGenerator def my_validator ( phrase : str ) -> bool : if phrase . startswith ( \"jija\" ): return True else : return False generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( validators = [ my_validator ])","title":"Writing my own validator"}]}