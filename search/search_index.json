{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview What is mc.py ? mc.py is a tiny and trivial Python package which provides you a simple way to generate phrases using Markov chains. What it can be used for? I think it is mostly just for fun. I know that some devs use this or similar packages/algorithms for chat-bots to generate funny messages (e.g. VK bot Witless or VK bot Sglypa ). I used it to generate cringy gopnik-style quotes. Worth reading before starting (It is complicated and absolutely optional, but quite interesting). Markov chain (Wikipedia) . Markov model (Wikipedia) . From \"What is a Markov Model\" to \"Here is how Markov Models Work\" ( mc.py is in fact based on this article). Installation Just install it using pip or with any other package manager you use... Should I seriously teach you this? pip install mc.py Simple usage example More examples can be found here . import mc from mc.builtin import validators generator = mc . PhraseGenerator ( samples = [ \"hello world\" , \"world of cuties\" , \"bruh\" ] ) phrase = generator . generate_phrase ( validators = [ validators . words_count ( minimal = 4 )] ) print ( phrase ) # >>> \"hello world of cuties\"","title":"Overview"},{"location":"#overview","text":"","title":"Overview"},{"location":"#what-is-mcpy","text":"mc.py is a tiny and trivial Python package which provides you a simple way to generate phrases using Markov chains.","title":"What is mc.py?"},{"location":"#what-it-can-be-used-for","text":"I think it is mostly just for fun. I know that some devs use this or similar packages/algorithms for chat-bots to generate funny messages (e.g. VK bot Witless or VK bot Sglypa ). I used it to generate cringy gopnik-style quotes.","title":"What it can be used for?"},{"location":"#worth-reading-before-starting","text":"(It is complicated and absolutely optional, but quite interesting). Markov chain (Wikipedia) . Markov model (Wikipedia) . From \"What is a Markov Model\" to \"Here is how Markov Models Work\" ( mc.py is in fact based on this article).","title":"Worth reading before starting"},{"location":"#installation","text":"Just install it using pip or with any other package manager you use... Should I seriously teach you this? pip install mc.py","title":"Installation"},{"location":"#simple-usage-example","text":"More examples can be found here . import mc from mc.builtin import validators generator = mc . PhraseGenerator ( samples = [ \"hello world\" , \"world of cuties\" , \"bruh\" ] ) phrase = generator . generate_phrase ( validators = [ validators . words_count ( minimal = 4 )] ) print ( phrase ) # >>> \"hello world of cuties\"","title":"Simple usage example"},{"location":"PhraseGenerator/","text":"PhraseGenerator High-level interface to generate phrases. Creation PhraseGenerator instance is created same way as any class instance. It's constructor method accepts the following arguments: samples ( List[str] ) - list of sample phrases to be used to generate new ones. order ( int , >= 1, default is 1 ) - order of Markov model which will be used to generate phrases. Example: from mc import PhraseGenerator generator = PhraseGenerator ( samples = [ \"i hate cottage cheese\" , \"cottage cheese is awful\" ], order = 1 , ) Methods generate_phrase(...) Generates random phrase which was validated by provided validators , formatted using formatters in provided number of attempts. Arguments: attempts ( int , default is 999 ) - amount of attempts before giving up generating phrase. validators ( list of Callable ) - list of functions that validate result phrase . formatters ( list of Callable ) - list of functions that format result phrase . Raises PhraseGeneratorError if generator was not able to generate phrase in given amount of tries. generate_phrase_or_none(...) Same as generate_phrase but returns None instead of raising PhraseGeneratorError . generate_phrases(...) Generates given amount of phrases and returns list of them. Arguments: count ( int ) - number of generated phrases Other arguments are the same as in generate_phrase Raises PhraseGeneratorError if generator was not able to generate phrase in given amount of tries.","title":"PhraseGenerator"},{"location":"PhraseGenerator/#phrasegenerator","text":"High-level interface to generate phrases.","title":"PhraseGenerator"},{"location":"PhraseGenerator/#creation","text":"PhraseGenerator instance is created same way as any class instance. It's constructor method accepts the following arguments: samples ( List[str] ) - list of sample phrases to be used to generate new ones. order ( int , >= 1, default is 1 ) - order of Markov model which will be used to generate phrases. Example: from mc import PhraseGenerator generator = PhraseGenerator ( samples = [ \"i hate cottage cheese\" , \"cottage cheese is awful\" ], order = 1 , )","title":"Creation"},{"location":"PhraseGenerator/#methods","text":"","title":"Methods"},{"location":"PhraseGenerator/#generate_phrase","text":"Generates random phrase which was validated by provided validators , formatted using formatters in provided number of attempts. Arguments: attempts ( int , default is 999 ) - amount of attempts before giving up generating phrase. validators ( list of Callable ) - list of functions that validate result phrase . formatters ( list of Callable ) - list of functions that format result phrase . Raises PhraseGeneratorError if generator was not able to generate phrase in given amount of tries.","title":"generate_phrase(...)"},{"location":"PhraseGenerator/#generate_phrase_or_none","text":"Same as generate_phrase but returns None instead of raising PhraseGeneratorError .","title":"generate_phrase_or_none(...)"},{"location":"PhraseGenerator/#generate_phrases","text":"Generates given amount of phrases and returns list of them. Arguments: count ( int ) - number of generated phrases Other arguments are the same as in generate_phrase Raises PhraseGeneratorError if generator was not able to generate phrase in given amount of tries.","title":"generate_phrases(...)"},{"location":"PhraseGenerator/formatters/","text":"Formatters Formatters in mc.py are functions that format result phrase. They accept str and return str . mc.py currently have only one built-in formatter. It is located at mc.builtin.formatters . Builtin formatters usual_syntax - formats phrase as usual sentences: Uppercase first letter, etc. Example: from mc.builtin.formatters import usual_syntax text = \"hello, world! well\" formatted_text = usual_syntax ( text ) print ( formatted_text ) # >>> \"Hello, world! Well.\" Writing my own formatter It's easy! Just keep in mind that formatter should accept str , do something with it and return formatted str . Example: from mc import PhraseGenerator def my_formatter ( phrase : str ) -> str : return \"The computer says: \" + phrase generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( formatters = [ my_formatter ])","title":"Formatters"},{"location":"PhraseGenerator/formatters/#formatters","text":"Formatters in mc.py are functions that format result phrase. They accept str and return str . mc.py currently have only one built-in formatter. It is located at mc.builtin.formatters .","title":"Formatters"},{"location":"PhraseGenerator/formatters/#builtin-formatters","text":"usual_syntax - formats phrase as usual sentences: Uppercase first letter, etc. Example: from mc.builtin.formatters import usual_syntax text = \"hello, world! well\" formatted_text = usual_syntax ( text ) print ( formatted_text ) # >>> \"Hello, world! Well.\"","title":"Builtin formatters"},{"location":"PhraseGenerator/formatters/#writing-my-own-formatter","text":"It's easy! Just keep in mind that formatter should accept str , do something with it and return formatted str . Example: from mc import PhraseGenerator def my_formatter ( phrase : str ) -> str : return \"The computer says: \" + phrase generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( formatters = [ my_formatter ])","title":"Writing my own formatter"},{"location":"PhraseGenerator/validators/","text":"Validators Validators in mc.py are functions that validate result phrase. They accept str and return bool ( True or False ) according to whether they liked the phrase. mc.py currently have two built-in validators. They are located at mc.builtin.validators . Builtin validators words_count - validates phrase by words count. chars_count - validates phrase by symbols count. Example: from mc import PhraseGenerator from mc.builtin import validators generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( validators = [ validators . words_count ( minimal = 2 , maximal = 5 ), validators . chars_count ( minimal = 6 , maximal = 99 ) ] ) Writing my own validator It's simple! Just keep in mind that validator should accept str , do some checks and return True or False . Example: from mc import PhraseGenerator def my_validator ( phrase : str ) -> bool : if phrase . startswith ( \"jija\" ): return True else : return False generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( validators = [ my_validator ])","title":"Validators"},{"location":"PhraseGenerator/validators/#validators","text":"Validators in mc.py are functions that validate result phrase. They accept str and return bool ( True or False ) according to whether they liked the phrase. mc.py currently have two built-in validators. They are located at mc.builtin.validators .","title":"Validators"},{"location":"PhraseGenerator/validators/#builtin-validators","text":"words_count - validates phrase by words count. chars_count - validates phrase by symbols count. Example: from mc import PhraseGenerator from mc.builtin import validators generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( validators = [ validators . words_count ( minimal = 2 , maximal = 5 ), validators . chars_count ( minimal = 6 , maximal = 99 ) ] )","title":"Builtin validators"},{"location":"PhraseGenerator/validators/#writing-my-own-validator","text":"It's simple! Just keep in mind that validator should accept str , do some checks and return True or False . Example: from mc import PhraseGenerator def my_validator ( phrase : str ) -> bool : if phrase . startswith ( \"jija\" ): return True else : return False generator = PhraseGenerator ( samples = [ ... ]) generator . generate_phrase ( validators = [ my_validator ])","title":"Writing my own validator"}]}